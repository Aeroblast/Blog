#mode:tech
#title:面向原始文稿生成EPUB的理论与实践暨EPUB制作的碎碎念

#center:今天我就要再来指点江山一下。

#h3:啥意思？
EPUB，一种电子书格式。所有官方文档都是全大写，所以我就要写成EPUB。继续往下看的话，需要读者至少试着自己手工做过EPUB，如果不会就只能图一乐了。

那“面向原始文稿”和“生成”是什么呢？
原始文稿，可以理解为方便语文工作者干活的文稿，比如纯文本（.txt）或者MS Word（.doc）。生成，就是不直接编辑EPUB文档，由软件输出EPUB。

下文假定一种软件处理工具，可以完成“生成”的动作，将文稿转化为EPUB电子书，称之为“处理工具”。讨论EPUB制作方式时，将直接编辑大部分代码的方式称为“手工”，比如通过Sigil编辑，比如通过记事本编辑然后压缩改后缀。

#h3:处理工具的必要性
EPUB文档使用Web系技术定义，有极强的表现力，可以应对各种的内容。这样一个强大的格式展示小说等以文本为主体的内容自然不在话下。然而文稿的编辑者往往并不直接负责电子书。究其原因，当我们关注文稿内容时，电子书格式显得十分臃肿，需要更简单的形式来表达格式。

比如段落标记。文稿不像代码，不需要换行后仍然是一段，也就不需要使用明确的标签来标记段落。像markdown、bbcode这些格式，全都使用换行代替了段落标签。维护文稿的时候，文稿工作者显然不希望面对大片被p包裹的段落。

这种简化同样可以发生在特殊样式上。markdown和bbcode各有一套简化方式，而这里再举例一个日文流行的格式。青空文库TXT用最多三个符号定义一个注音标记，|内容《注音》，而前面的分隔符是可选的，文本没有歧义的情况只需要《》。作为对比，HTML中的注音由ruby、rt、rp、rb几种元素定义，最简单也至少是ruby和rt。这种繁杂自然有相应的考虑，比如显示模型、向后兼容，但这些东西显然不是写稿的人该承担的。而bbcode的一种方言里，注音成了ruby标签的参数，简便又没有与常用符号冲突，也是一种合理的方案。

可以简化的不止是样式，还有内容。在这里我们可以联想一下wiki的模板。输入必要的参数以后，模板可以展开为各种各样的代码。

也就是说，在我们处理某种特定的文稿时，Web系技术为我们不需要的功能牺牲了可读性。
因此，编辑文稿时，我们需要一种更简单的样式表达，然后将这种表达映射到EPUB的代码上。这样，维护文稿便不需要面对HTML代码，由处理工具代劳。

除了简化样式表达，我们往往还需要一些优化。
比如说，主流的排版系统并没有考虑到有人会用一大串省略号或破折号。正常使用两个省略号的时候，排版系统默认保持不断开——这是好事——但是如果使用一大串仍然触发这个特性，省略号就会冲到画面外。处理工具可以自动找到这种场景，添加样式，设置换行的行为。
中英文混排的时候，有人会在意英文前后要有空格，这也是处理工具能做的。

使用处理工具还有一些额外的好处。比如你可以让自有表达映射到一些其他的发布格式，插入图床链接。比如增加原文译文对照便于维护文档。

#h3:处理工具的实现
事实上，经验丰富的手工EPUB制作者一般会攒一批正则替换。每次替换一遍的过程事实上就是处理工具的雏形。假定我们需要的主要功能有标题、字号、字重等等，选取自己喜欢的符号之后，写符号至HTML的正则替换即可。文本优化也可以由正则替换完成。但是，处理工具可以有更高的自由度，做一些正则表达式做不到的事情。

一些例子：

插图。通常我们希望它单独占一页，如果可以的话上下或左右居中（依屏幕比例而定）。正则替换加个样式自然可以做到这一点。如果需要更高的兼容性，甚至可以切成单独一个XHTML文档。而面对文档我们自然是希望顺着章节的逻辑在一个文档里编辑。

注释。很多人第一反应大概是自动编号。其实还有一点重要的是，可以将注释内容统一挪到文档末尾。正统的注释fallback是在文档末尾做双向链接，而文档维护者自然希望注释内容紧跟着正文引用处。

如果总结一下，就是阅读系统和文档维护者在逻辑上有巨大不同时，正则表达式可能难以完成调和任务，需要灵活性更高的工具。

此外，我们有时候还是会用到偏门的东西，或者一些重格式轻内容、需要调试方便的部分。对此，可以预留一些插入HTML代码甚至HTML文档的方式，确保最终的表达能力。如果考虑简单效果组合无法表示的样式，可以设计声明class的符号，添加额外CSS。

对于熟练的手工制作者来说，将常用的效果模板化意味着减少犯错的概率，完全可以按照自己的风格制作处理工具。

#h3:小结
回到开头，当存在一个处理工具把文档维护者和电子书制作者合二为一，每当文档维护者修正文稿，都可以直接得到对应的电子书，也就不必由不熟悉文稿的电子书编辑者越俎代庖地进行修正工作。

遗憾的是，这样的系统虽然减少了劳力，但仍然需要对目标文本格式有所了解，文档的维护者可能无法顾及。此时手工制作者就可以利用这种知识，从下游加工环节变成文稿的直接协助者。当文档维护者选择顾及格式，后续的改进就应该基于原始文档。这样固然少了几分工匠精神，可省下的是维护的精力啊。

#h3:碎碎念
比较偏个人喜好，不吐不快。只谈个人感受，不是按着谁的脑袋要求怎么做。

#h5:段间距
我很难理解中文文本给段落加微妙的段间距。这样做的后果是造成一种疏密不一的感觉，对话较多的文体尤其明显。事实上，绝大部分中文实体书都不会给段落之间加额外的间距，而网文平台通常会给极大的行距和段间距。这两种做法都能避免强烈的不适感。

#h5:参照实体书制作样式容易发生的问题
首先，“那些样式我的阅读器自动排版又看不到，花里胡哨也没什么用，这种努力没有意义”，这种攻击我并不认同，换一个场景就是“翻译的正确性我又看不出来，几个错别字我又不在乎，纠那些东西有什么意义”。对精美样式的追求是值得肯定的，即便我也不愿意在这方面花过多的时间。
“不值得”的声音其实是最多的，如果不是说不值得，那么容易发生的问题是什么呢？

丑。

这不是针对谁，如果教条地照搬原书素材的元素和位置，产生样式劣化且缺失插图的艺术字，不管是谁都会做得很丑。标题也好介绍也好台词也好，出现在插图上的文字在设计上是考虑了插图内容的，比如围着角色。这时候去掉插图留下艺术字，空出来的部分会非常诡异。还有一种常见的诡异做法是，原素材彩色背景下采用了浅色的字和阴影，电子书白色背景下照搬了字，没了背景，设计师看了要杀人。

除了教条主义，还有个原因是兼容性。这并不单单是照着实体书做样式产生的问题，但在这些乱七八糟的样式上尤其严重。EPUB2.0时代好像没有区分，3.0以后就有两种排版，一个是可重排布局（Reflowable layout）或者叫流式（Flowing），还有一个是新的，叫固定布局（Fixed layout）。
按理说，参照实体书制作样式应该采用固定布局，也就是你声明一个viewport，然后设备怎么变都不会影响内容的位置。如果用一般的流式，就很容易出现意料外的结果。

阅读系统的视口大小、用户设定的主题、字体都会影响流式布局的最终效果，不加考虑地做特效会变得非常令人不适。
比如用户的阅读系统过早或过晚地切页，乱了。
比如用户设的字体大了，提前换行，乱了。
比如艺术字全都吸附在边缘上，视口宽的时候，中间的空白会更扎眼。
比如用户开了夜间模式，你的字消失了。
触发以上任意一种情况都会造成丑陋的显示效果。单一设备、阅读器、字体设置的情况下可能没问题，但这些都是变数。

固定布局的阅读器支持度似乎并不是那么好。另一种方案是SVG，主流系统至少五六年前就支持了。然而，SVG在黑暗模式下的效果同样并不理想，缩放浏览的支持也不好。
做好一张完美的JPG贴上去简单高效。当然，不是谁都有那个精力做图，更简单的妥协方案是原图放在那，然后简单明了地摆出图中文字。可以加一些简单的颜色、框框帮助读者把图和文字联系起来。

另一方面，实体书小的也有A6规格，这种固定版式放在手机上肯定不舒服，用流式做也未尝不可。如何将实体书的元素重新组合，就要看审美能力了。艺术字标题大大方方摆在中间也许不错，也可以用CSS的media查询来区分平板和手机，总之我也看到过有人做得很美观。然而，插画的内容似乎无论如何都难以重新组合。

回归原点思考一下，或许能更好地理清思路，避免为代码而代码。想想目标效果、目标平台、目标场景。
完美还原实体版式，那就放位图。
还原版式的同时想修改方便，那就牺牲夜间模式，上SVG。
希望有flowing特性，那就用代码做。
只是想让读者知道有上面什么字，那就自然地写出来，方便手机上懒得放大的人。
反正正文里有，看不看字无所谓，那直接放图。
觉得读者可以旋转设备，那把图转90度也可以。
害怕玩花的不容易看，那就提供个最简单样式的fallback。
为了练习代码，那随便怎么玩。
总之，我不反对某种具体的做法，只是要当心别对被牺牲的用户吹精美。

#h5:元数据乱象
不是什么大事，就是扎眼。这东西也确实没人看，就当强迫症在胡言乱语好了。

file-as。在EPUB2.0里这是一个属性，3.0里变成了用meta标签定义。这个东西可以关联给很多标签，含义是“a normalized form of the name”，说白了就是给电脑排序用的，比如标准里的例子就是作者写名字然后姓氏，排序写姓然后名，[link=https://www.w3.org/publishing/epub3/epub-packages.html#example-9]有兴趣可以看一眼[/link]。而日本出版社在这里填的是标题、作者、出版社的全片假名和数字写法。很多人把该往contributor元素里写的东西往上写，就非常诡异。contributor可以写得很清楚，还能从MARC Relators vocabulary里找个合适的身份，比如Book designer [bkd]、Book producer [bkp]。

其他也没什么规律。
手工制作者的名字往哪写的都有，除了file-as还有直接跟作者并列的，像rights这种敏感的地方有人还填上个名字。description描述书的内容，简介嘛，结果有的简介就是谁做的书。
见到过比较有心的人打算在元数据里写插画或者译者，结果自创了一套格式，非常诡异，EPUBCheck也会报Undefined property。实际上无论creator还是contributor元素，都可以定义角色，在MARC code里找到标准的写法。大家都在写作者是aut，也就是Author，其实还有插画师Illustrator [ill]、译者Translator [trl]，校对大概是Proofreader [pfr]，那个列表里甚至能找到什么金主Funder[fnd]。

W3C的EPUB标准可能有点虚，一些具体实践可以参考目标平台的指南，比如：
Kindle Publishing Guidelines
Apple Books Asset Guide

#h3:结语
上面提到的实践也有一部分我不用，另外还有一些额外的个人喜好，比如直角引号的缩进调整、名单和目录换行后缩进。所以，很多地方都是彼之蜜糖吾之砒霜，只能说都是努力根据自己的需求制作最符合维护和浏览要求的东西，很可能换一个用户就不吃这套了。
长期以来，一些对话字里行间透着一种手工比生成好意识。这篇文章就是用来解释一下，生成EPUB提供的可能性，实际有过多少考虑。另一方面，当我同时照顾PC、手机、平板、Kindle的可用性时，我不希望看到有哪个出家门就乱套的版本主动跑过来展示工匠精神。
[time]20210928 23:50:15[/time]